/**
 * User Preferences Store
 * 
 * This store manages user preferences for the application,
 * including unit display preferences (metric vs imperial).
 */

import { defineStore } from 'pinia';
import { ref, computed, watch } from 'vue';
import { convertByPreference, getUnitForDisplay } from '@/utils/unitConversion';

// Types
type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'log' | 'data';

interface LoggingPreferences {
  debug: boolean;
  data: boolean;
  info: boolean;
  warn: boolean;
  error: boolean;
  remote: boolean;
  namespaces: string[];
}

interface DisplayPreferences {
  darkMode: boolean;
  highContrast: boolean;
}

interface UnitPreferences {
  useImperial: boolean;
  depthDecimals: number;
  speedDecimals: number;
  temperatureDecimals: number;
  distanceDecimals: number;
  angleDecimals: number;
}

interface Preferences {
  units: UnitPreferences;
  display: DisplayPreferences;
  logging: LoggingPreferences;
}

interface PreferencesState {
  preferences: Preferences;
  _initialized: boolean;
}

interface Logger {
  (message: string, ...args: any[]): void;
  info: (message: string, ...args: any[]) => void;
  warn: (message: string, ...args: any[]) => void;
  error: (message: string, ...args: any[]) => void;
  debug: (message: string, ...args: any[]) => void;
  setLevel: (level: LogLevel, enabled: boolean) => void;
}

// Extend Window interface to include logger
declare global {
  interface Window {
    logger?: {
      info: (...args: any[]) => void;
      warn: (...args: any[]) => void;
      error: (...args: any[]) => void;
      debug: (...args: any[]) => void;
      log: (...args: any[]) => void;
      data: (...args: any[]) => void;
      setLevel?: (level: string, enabled: boolean) => void;
      enableRemoteLogging?: (enabled: boolean) => void;
      setNamespaces?: (namespaces: string[]) => void;
    };
  }
}

// Create a fallback logger for when window.logger is not available
const fallbackLogger = {
  info: console.log.bind(console, '[preferences]'),
  warn: console.warn.bind(console, '[preferences]'),
  error: console.error.bind(console, '[preferences]'),
  debug: console.debug.bind(console, '[preferences]'),
  log: console.log.bind(console, '[preferences]'),
  data: console.debug.bind(console, '[preferences]'),
  setLevel: (level: string, enabled: boolean) => {
    console.log(`[preferences] Set log level ${level} to ${enabled ? 'enabled' : 'disabled'}`);
  },
  enableRemoteLogging: (enabled: boolean) => {
    console.log(`[preferences] Remote logging ${enabled ? 'enabled' : 'disabled'}`);
  },
  setNamespaces: (namespaces: string[]) => {
    console.log('[preferences] Set log namespaces:', namespaces);
  }
};

// Get the current logger, falling back to the fallback logger
const getLogger = () => (typeof window !== 'undefined' && window.logger) || fallbackLogger;

// Define the logger interface
interface SafeLogger {
  // Standard log methods
  info: (...args: any[]) => void;
  warn: (...args: any[]) => void;
  error: (...args: any[]) => void;
  debug: (...args: any[]) => void;
  log: (...args: any[]) => void;
  data: (...args: any[]) => void;
  
  // Log level control
  setLevel: (level: LogLevel, enabled: boolean) => void;
  
  // Remote logging control
  enableRemoteLogging?: (enabled: boolean) => void;
  
  // Namespace control
  setNamespaces?: (namespaces: string[]) => void;
  
  // Index signature for dynamic property access
  [key: string]: any;
}

// Create a safe logger that won't throw if the logger isn't available
const safeLogger: SafeLogger = {
  // Standard log methods
  info: (...args: any[]) => getLogger().info('[preferences]', ...args),
  warn: (...args: any[]) => getLogger().warn('[preferences]', ...args),
  error: (...args: any[]) => getLogger().error('[preferences]', ...args),
  debug: (...args: any[]) => getLogger().debug('[preferences]', ...args),
  log: (...args: any[]) => getLogger().log('[preferences]', ...args),
  data: (...args: any[]) => getLogger().data('[preferences]', ...args),
  
  // Log level control
  setLevel: (level: LogLevel, enabled: boolean) => {
    const logger = getLogger();
    if (logger.setLevel) {
      logger.setLevel(level, enabled);
    } else {
      console.log(`[preferences] Set log level ${level} to ${enabled ? 'enabled' : 'disabled'}`);
    }
  },
  
  // Remote logging control
  enableRemoteLogging: (enabled: boolean) => {
    const logger = getLogger();
    if (logger.enableRemoteLogging) {
      logger.enableRemoteLogging(enabled);
    } else {
      console.log(`[preferences] Remote logging ${enabled ? 'enabled' : 'disabled'}`);
    }
  },
  
  // Namespace control
  setNamespaces: (namespaces: string[]) => {
    const logger = getLogger();
    if (logger.setNamespaces) {
      logger.setNamespaces(namespaces);
    } else {
      console.log('[preferences] Set log namespaces:', namespaces);
    }
  }
};

// Default preferences
const defaultPreferences: Preferences = {
  units: {
    useImperial: false, // Default to metric
    depthDecimals: 1,
    speedDecimals: 1,
    temperatureDecimals: 1,
    distanceDecimals: 1,
    angleDecimals: 0
  },
  display: {
    darkMode: false,
    highContrast: false
  },
  logging: {
    // Log levels and remote toggle
    debug: false,
    data: false,   
    info: true,
    warn: true,
    error: true,
    remote: false,
    // Namespace filters (supports * wildcard)
    namespaces: []
  }
};

// Helper function to safely log messages
const safeLog = (level: LogLevel, ...args: any[]) => {
  try {
    safeLogger[level](...args);
  } catch (e) {
    console.error('[preferences-store] Error in logger:', e);
  }
};

// Helper function to load saved preferences
function loadSavedPreferences(): Preferences {
  safeLog('info', 'Loading saved preferences from localStorage');
  try {
    const saved = localStorage.getItem('preferences');
    if (saved) {
      const parsed = JSON.parse(saved);
      safeLog('info', 'Loaded saved preferences:', parsed);
      return { ...defaultPreferences, ...parsed };
    }
  } catch (error) {
    safeLog('error', 'Error loading saved preferences, using defaults', error);
  }
  return { ...defaultPreferences };
}

console.log('Defining preferences store...');

// Create a highly visible log message for store instantiation
const logStoreCreation = (): void => {
  try {
    const style = 'background: #1a1a2e; color: #4cc9f0; font-size: 14px; font-weight: bold; padding: 10px; border-radius: 5px; border: 2px solid #4cc9f0;';
    const stack = new Error().stack || '';
    const location = stack.split('\n')[2]?.trim() || 'unknown';
    
    // Log to console with styling
    console.log(
      '%c🚀 PREFERENCES STORE INSTANTIATED 🚀\n' +
      '══════════════════════════════════════════════════════════════\n' +
      `Timestamp: ${new Date().toISOString()}\n` +
      `Location: ${location}\n` +
      '══════════════════════════════════════════════════════════════',
      style
    );
    
    // Also log to our safe logger
    safeLog('info', 'Preferences store instantiated', { 
      timestamp: new Date().toISOString(), 
      location 
    });
  } catch (e) {
    console.error('Error in logStoreCreation:', e);
  }
};

// Create and export the store
export const usePreferencesStore = defineStore('preferences', () => {
  // State
  const preferences = ref<Preferences>(loadSavedPreferences());
  const _initialized = ref(false);
  const logger = ref<any>(null);
  
  // Initialize the store and logger
  const init = async () => {
    if (_initialized.value) return;
    
    try {
      // Initialize the logger first
      const { createLogger } = await import('@/services/logger');
      logger.value = await createLogger('preferences-store');
      
      // Apply any saved logging preferences
      await applyLoggingPreferences();
      
      // Set up watchers for preferences that need to be applied immediately
      setupPreferenceWatchers();
      
      _initialized.value = true;
      logger.value.info('Preferences store initialized');
    } catch (error) {
      console.error('Failed to initialize preferences store:', error);
      throw error;
    }
  };
  
  // Set up watchers for preferences that need immediate application
  const setupPreferenceWatchers = () => {
    // Watch for theme changes
    watch(() => preferences.value.display.darkMode, (newValue) => {
      document.documentElement.setAttribute('data-theme', newValue ? 'dark' : 'light');
    }, { immediate: true });
  };
  
  // Apply logging preferences
  const applyLoggingPreferences = async () => {
    if (!logger.value) return;
    
    const { logging } = preferences.value;
    logger.value.info('Applying logging preferences', { logging });
    
    try {
      // Apply log levels
      if (logging.debug !== undefined) {
        logger.value.setLevel('debug', logging.debug);
      }
      if (logging.info !== undefined) {
        logger.value.setLevel('info', logging.info);
      }
      if (logging.warn !== undefined) {
        logger.value.setLevel('warn', logging.warn);
      }
      if (logging.error !== undefined) {
        logger.value.setLevel('error', logging.error);
      }
      if (logging.remote !== undefined) {
        logger.value.enableRemoteLogging?.(logging.remote);
      }
      if (logging.namespaces?.length) {
        logger.value.setNamespaces?.(logging.namespaces);
      }
    } catch (error) {
      console.error('Error applying logging preferences:', error);
    }
  };
  
  // Save preferences to storage
  const savePreferences = async () => {
    try {
      localStorage.setItem('preferences', JSON.stringify(preferences.value));
      logger.value?.info('Preferences saved');
    } catch (error) {
      logger.value?.error('Error saving preferences:', error);
      throw error;
    }
  };
  
  // Format a value based on user preferences
  const formatValue = (value: number, unit: string, customDecimals?: number) => {
    return convertByPreference(value, unit, preferences.value.units, customDecimals);
  };
  
  // Toggle between imperial and metric units
  const toggleUnits = () => {
    preferences.value.units.useImperial = !preferences.value.units.useImperial;
    savePreferences();
  };

  // Set a specific logging preference
  const setLoggingPreference = (key: keyof LoggingPreferences, value: string | boolean, enabled?: boolean) => {
    if (key === 'remote') {
      preferences.value.logging.remote = value as boolean;
    } else if (key === 'namespaces' && typeof value === 'string') {
      // Handle namespaces
      const namespaces = preferences.value.logging.namespaces || [];
      const index = namespaces.indexOf(value);
      
      if (enabled && index === -1) {
        namespaces.push(value);
      } else if (!enabled && index !== -1) {
        namespaces.splice(index, 1);
      }
      
      preferences.value.logging.namespaces = namespaces;
    } else if (key in preferences.value.logging) {
  // Handle log levels
  (preferences.value.logging as any)[key] = enabled ?? value;
  
  applyLoggingPreferences();
  savePreferences();
  return true;
};

// Alias for backward compatibility
const setRemoteLogging = (key: string, value: boolean) => {
  setLoggingPreference('remote', value);
};

// Toggle between imperial and metric units
const toggleUnits = () => {
  preferences.value.units.useImperial = !preferences.value.units.useImperial;
  savePreferences();
  safeLog('info', `Units toggled to ${preferences.value.units.useImperial ? 'imperial' : 'metric'}`);
  return preferences.value.units.useImperial;
};

// Reset all preferences to defaults
const resetPreferences = async () => {
  preferences.value = JSON.parse(JSON.stringify(defaultPreferences));
  await savePreferences();
  applyLoggingPreferences();
};

// Reset logging preferences to defaults
const resetLoggingPreferences = () => {
  preferences.value.logging = {
    ...defaultPreferences.logging,
    namespaces: [...defaultPreferences.logging.namespaces]
  };
    applyLoggingPreferences();
    savePreferences();
  };

  return {
    // State
    preferences,
    _initialized,
    
    // Getters
    useImperial: computed(() => preferences.value.units.useImperial),
    darkMode: computed(() => preferences.value.display.darkMode),
    loggingEnabled: computed(() => preferences.value.logging.remote),
    availableLoggers: computed(() => [
      { id: 'debug', label: 'Debug Logs' },
      { id: 'info', label: 'Info Logs' },
      { id: 'warn', label: 'Warning Logs' },
      { id: 'error', label: 'Error Logs' },
      { id: 'data', label: 'Data Logs' },
      { id: 'remote', label: 'Remote Logging' }
    ]),
    
    // Actions
    init,
    savePreferences,
    formatValue,
    toggleUnits,
    setLoggingPreference,
    setRemoteLogging,
    resetPreferences,
    resetLoggingPreferences,
    applyLoggingPreferences,
    setupPreferenceWatchers
  };
});
    
    setLoggingPreference(key, value, enabled) {
      // Handle both simple key-value pairs and namespace-based preferences
      if (enabled !== undefined) {
        // Namespace-based preference (backward compatibility)
        const namespace = key;
        enabled = value;
        
        if (!this.preferences.logging.namespaces) {
          this.preferences.logging.namespaces = [];
        }
        
        const existingIndex = this.preferences.logging.namespaces.indexOf(namespace);
        
        if (enabled && existingIndex === -1) {
          this.preferences.logging.namespaces.push(namespace);
        } else if (!enabled && existingIndex !== -1) {
          this.preferences.logging.namespaces.splice(existingIndex, 1);
        }
      } else {
        // Simple key-value preference
        this.preferences.logging = {
          ...this.preferences.logging,
          [key]: value
        };
      }
      
      this.savePreferences();
      this.applyLoggingPreferences();
      return true;
    },
    
    // Alias for backward compatibility
    setRemoteLogging(key, value) {
      this.setLoggingPreference(key, value);
    },
    
    resetLoggingPreferences() {
      if (defaultPreferences.logging) {
        this.preferences.logging = JSON.parse(JSON.stringify(defaultPreferences.logging));
        this.savePreferences();
        this.applyLoggingPreferences();
        return true;
      }
      return false;
    },
    
    async applyLoggingPreferences() {
      const { logging } = this.preferences;
      
      safeLog('info', 'Applying logging preferences', { logging });
      
      try {
        // Apply log levels using safeLogger
        if (logging.debug !== undefined) {
          safeLog('debug', 'Setting debug log level:', logging.debug);
          safeLogger.setLevel?.('debug', logging.debug);
        }
        
        if (logging.data !== undefined) {
          safeLog('debug', 'Setting data log level:', logging.data);
          safeLogger.setLevel?.('data', logging.data);
        }
        
        if (logging.info !== undefined) {
          safeLog('info', 'Setting info log level:', logging.info);
          safeLogger.setLevel?.('info', logging.info);
        }
        
        if (logging.warn !== undefined) {
          safeLog('warn', 'Setting warn log level:', logging.warn);
          safeLogger.setLevel?.('warn', logging.warn);
        }
        
        if (logging.error !== undefined) {
          safeLog('error', 'Setting error log level:', logging.error);
          safeLogger.setLevel?.('error', logging.error);
        }
        
        // Apply remote logging setting if available
        if (logging.remote !== undefined) {
          safeLog('info', 'Setting remote logging:', logging.remote);
          safeLogger.enableRemoteLogging?.(logging.remote);
        }
        
        // Apply namespaces if available
        if (logging.namespaces && Array.isArray(logging.namespaces)) {
          safeLog('info', 'Setting log namespaces:', logging.namespaces);
          safeLogger.setNamespaces?.(logging.namespaces);
        }
        
        safeLog('info', 'Logging preferences applied successfully');
      } catch (error) {
        safeLog('error', 'Error applying logging preferences:', error);
      }
    },
    
    async savePreferences() {
      try {
        localStorage.setItem('userPreferences', JSON.stringify(this.preferences));
        safeLog('info', 'Preferences saved to localStorage');
        return true;
      } catch (error) {
        safeLog('error', 'Error saving preferences:', error);
        return false;
      }
    }
  }
});

// Log store definition
console.log('Preferences store defined with ID:', 'preferences');

// Export the store
export default usePreferencesStore;
